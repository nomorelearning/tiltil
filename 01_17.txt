*목록*
1. 챗피티
2. API
3. 챗봇 프로그램 (챗피티 API)
4. prompt engineering

1. chat gpt
- generative AI: 새로운 콘텐츠 생성하는 인공지능 모델
- chat gpt: 생성모델/사전훈련/트렌스포머(AI 모델 이름)
    - 주요개념) generative AI: 기존 패턴 기반으로 새로운 콘텐츠 생성
                pretained: llm + 추가 데이터 + 추가강화학습
                transformer: 문장 속 단어간 관계 추적해 맥락과 의미 학습, 대화형 작업에 강점
- 트랜스포머: 신경망 구조, Attention 메커니즘
    - 주요개념) self-Attention 메커니즘: 입력 데이터 간 관계,중요도 계산
                병렬처리기능: RNN과 달리 순차처리 필요없어 빠름
                스케일링 가능: 대규모 데이터 및 파라미터로 확장 가능
                + 챗피티는 transformer의 디코더 부분만 사용
                - Attention 메커니즘: 입력 데이터의 각 요소가 출력에 얼마나 중요한지 중요도 계산(중요한 것에 집중)

2. API
- Interface: 서로 다른 두 개의 시스템이 정보를 교환할 때, 그 사리 존재하는 접점
    사용자가 기기를 쉽게 동작시키거나 기계와 기계가 통신할 때 필요한 '약속된 방식'
    ex. 마우스 키보드 터치스크린 페달 운전대 ..
    - UI(User Interface): 사람이 소프트웨어에 접근하는 그래픽적.화면적 요소
        ex. ATM의 언어선택화면, 브라우저의 뒤로가기 버튼, 스마트폰 앱의 아이콘
    - 굳이 눈에 보일 필요가 없는 통신은 UI가 없는 인터페이스를 통해 데이터 교류중(기계와 기계, 시스템과 시스템 사이에서의 소통)
- 클라이언트와 서버
    - 웹의 동작 방식: 우리가 컴퓨터 혹은 모바일 기기로 웹페이지, 데이터를 보게 될 때까지 무슨 일이?
    - 클라이언트-서버 구조: (사진첨부)
        * 클라이언트: 요청하는 쪽(request) ; 프로그램이 인간을 대신해서
            ex. 사용자의 웹 브라우저, 모바일 앱
        * 서버: 요청을 받아(request), 요청에 대한 응답을 클라이언트에게(responses) ; 항상 동작하고 있어야 함
            ex. 웹 서버, 데이터베이스 서버
        ex. 사용자가 브라우저로 URL 입력하고 요청 보내면 > 서버가 해당 페이지, 데이터 보내줌
- API: 두 소프트웨어.시스템 사이에 소통하기 위해 약속된 소통방식(메커니즘)
    '약속된 방식의 인터페이스'로, 특정 규칙에 따라 데이터를 요청하고 응답하는 규칙을 제공
    - Aplication: 특정 기능을 수행하는 모든 소프트웨어(웹.모바일.데톱 앱 등..)
        특정 회사의 하드웨어 장치를 사용하기 위해서는 버전과 종류에 맞는 접근방식을 사용
        -> 마소에서 통신을 운영체제를 거쳐 진행하도록 규격화함(하지만 제조업체가 맞춰야 함)
    - 운영체제 하의 API와 앱 개발자의 API 두 가지 있음(이제 운영체제의 API에 따라야 함) -- 레이어드 아키텍처
        어플리케이션은 프레임워크에 요청, 프레임워크는 OS에 요청 ..
        "APP [Framesork] //  OS  //  H/W"
        앱끼리 통신)
        APP <-----------------> APP
        OS                      OS  ^ (여기서 APP고유 번호를 찾아야 함; 포트번호)
        H/W -----(internet)-----H/W (여기서 기기의 고유 번호를 찾아야 함; IPadress)
        웹서버는 80포트로 정해져 있다. 그래서 요청하지 않아도 됨.(등록하고 시작)
        **모든 자원의 관리는 운영체제가 함**
- API key: API에게 요청하는 앱을 구별하기 위한 고유한 식별 문자열
    ex. abc123xyz.. 처럼 랜덤하게 생성된 키를 서버가 발급(깃에서 해시값처럼)
    - (사진첨부)
    - 필요한 이유
        * 보안 강화: 무단 접근을 막고, 승인된 사용자만 요청할 수 있도록
        * 데이터 관리: API 호출 횟수, 사용량 모니터링, 일정량 이상의 사용시 제한 또는 과금 정책 적용 가능
            ex. 디도스 관리..
    - 주의사항: 공개된 곳에 노출금지, 키가 유출될 경우 무단사용 위험(정기 갱신 필요), 섭-클 구조에서 키 안전하게 저장하는 방법들 고려(ex. .gitignore)
- API 정리
    - API는 클라이언트와 서버 이 둘 사이의 "눈에 보이지 않는 인터페" 역할
    - API Key는 이 통신을 더욱 안전하게 만들기 위한 핵심 수단
        ex. agify ) 유알알엘 다음에는 물음표 그 뒤에는 변수
- 실습
html, css, js가 필수적으로 필요함(style.css는 예뻐보이고 가독성 높이기 위해)
    우리가 사용하는 자바스크립트는 Vuejs (사실 자유도가 높고 실무자는 React 사용)
    서버쪽은 백앤드(파이썬을 이용하여 작성)(DB는 SQLite; 장고에 내장되어 있음)
    프레임워크 : 자바는 스프링, ㅡㅡ은 장고
    ORM을 사용하여 디비를 만짐
    장고를 사용하여 API서버 만드는 것을 배움
    웹페이지에 html은 꼭 필요
    시작하는 태그, 담는 태그
    그림
    src: 소스(출처)
    elements창에 자바, biv에 정보가 담김
    유저 인터페이스에서 일어나는 이벤트 > 자바스크립트에서 입력한 코드들이 대기하다 작동
    자바는 웹페이지가 html과 연동되도록 도움
    자바 맨위에 두 줄은 흘려들어라
    curl: URL
    [array], {객체}
    exios는 요청
    colsole.log는 print와 유사한 함수
    그림
    탑피가 높은 값은 후보군의 크기가 크다(선택지가 다양해짐)
    온도가 높은 값은 질문할 때마다 답변이 달라질 가능성이 높다(후보군에서 선택할 때 확률)
    낮 템 높 탑) 높은 확률의 단어에 집중 + "   "(공부해서 채워넣기 ^.^)
    높 템 낮 탑) 확률 분포가 평탄해짐(다양 단어 선택 가능성 증가) + 확률 범위 좁음(선택후보 제한) => 창의 독창

복습 내용: 주피터파일, 강의자료