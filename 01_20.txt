목차
[1. 프로그래밍
 2. 파이썬
 3. Data Types
 4.Numeric Types
 5. Sequence Types
 6. 참고]

1. 프로그래밍
    1. 프로그래밍이란?
        - 프로그램: 명령어들 집합
        - 프로그래밍 핵심: 새 연산 정의, 조합 -> 유용한 작업 수행('문제 해결')
    2. 프로그래밍 언어: 컴퓨터에게 작업을 지시하고 문제를 해결하는 도구

2. 파이썬
    1. 파이썬 소개
        - 배우는 이유: 쉽고 간결한 문법(쉬운 문법), 파이썬 커뮤니티의 지원, 광범위한 응용 분야
        - 알고리즘 구현에 유리: 직관적 문법, 강력한 표준 라이브러리, 빠른 프로토타이핑
    2. 파이썬 실행
        - 인터프리터가 사용자의 명령어를 운영체제가 이해하는 언어로 바꿈
        - 파이썬 인터프리터 사용법 2가지
            * shell 프로그램으로 한번에 한 명령어씩
            * 확장자가 .py인 파일에 작성된 파이썬 프로그램을 실행
    3. 표현식과 값
        - 표현식: 값으로 평가될 수 있는 코드조각
        - 값: 표현식이 평가된 결과
        - 평가: 표현식을 실행하여 값을 얻는 과정; 표현식을 순차적으로 평가하여 프로그램의 동작을 결정
        - 문장: 실행 가능한 동작을 기술하는 코드(조건문, 반복문 함수 정의 등)
    4. 타입: 변수나 값이 가질 수 있는 데이터 종류를 의미(어떤 종류의 데이터인지, 어떻게 해석 처리 되어야 하는지 정의)
        - 타입은 '값'과 '값에 적용할 수 있는 연산'
        - 데이터 타입: Numeric(int, float, complex), Sequence(list, typle, range), Text Sequence(str), Non-Sequence(set, dict) ..
        - 데이터 타입에 맞는 연산 수행이 있음
        - 연산자 우선순위: 높음(**, -부호, *, /, //, %), 낮음(+, -)
    5. 변수와 메모리 "값이 저장되는 법"
        - 변수: 값을 저장하기 위한 이름
        - 변수 할당: 표현식을 통해 변수에 값을 저장
        - 변수, 값 그리고 메모리: 메모리의 모든 위치에는 고유 식별하는 메모리 주소가 존재, 객체는 타입을 갖는 메모리 주소 내 값, 변수는 그 변수가 찹조하는 객체의 메모리 주소를 가짐

3. Data Types: 값의 종류와 그 값에 적용 가능한 연산과 동작을 결정하는 속성(위 2-4. '타입' 참조)
    - 데이터 타입이 필요한 이유: 값들 구분하고 어떻게 다뤄야 하는지, 코드 읽는 사람이 변수의 의도를 쉽게 이해하고 데이터 타입 오류 예방

4. Numeric Types
    1. int: 정수 자료형
        - 진수 표현: 2진수(binary; 0b), 8진수(octal; 0o), 16진수(hexadecimal; 0x)
    2. float: 실수 자료형; 프로그래밍 언어에서 float는 실수에 대한 근삿값
        - 유한 정밀도
        - 실수 연산시 주의사항: 컴퓨터는 2진 사람은 10진 -> float point rounding error(부동소수점 에러) -> 해결핵: decimal 모듈 사용해 정확성 보장

5. Sequence Types: 여러 개의 값들을 순서대로 나열하여 저장하는 자료형
    - 순서(Sequence; 값들이 순서대로 저장), 인덱싱(Indexing; 각 값에 고유한 인덱스 있음, 특정 위치 값 선택하거나 수정 가능), 슬라이싱(인덱스 범위를 조절해 부분적 값 추출 가능), 길이(len()함수), 반복
    1. str: 문자열; 문자들의 순서가 있는 변경 불가능한 시퀀스 자료형
        - 중첩 따옴표, Escape Sequence
        - String Interpolation: 문자열 내에 변수나 표현식을 삽입하는 방법
            * f-String: 문자열에 f또는 F 접두어 붙이고 표현식을 {expression}로 작성하는 문법
        - Index: 시퀀스 내의 값들에 대한 고유한 번호, 각 값의 위히를 식별하는 데 사용되는 숫자
        - Slicing: 시퀀스의 일부분을 선택하여 추출하는 작업: 시작 인덱스와 끝 인덱스를 지정하여 해당 범위의 값을 포함하는 새로운 시퀀스를 생성

6. 참고
    - style guide
    - 주석