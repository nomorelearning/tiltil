목차
[1. 프로그래밍
 2. 파이썬
 3. Data Types
 4.Numeric Types
 5. Sequence Types
 6. 참고]

1. 프로그래밍
    1. 프로그래밍이란?
        - 프로그램: 명령어들 집합
        - 프로그래밍 핵심: 새 연산 정의, 조합 -> 유용한 작업 수행('문제 해결')
    2. 프로그래밍 언어: 컴퓨터에게 작업을 지시하고 문제를 해결하는 도구

2. 파이썬
    1. 파이썬 소개
        - 배우는 이유: 쉽고 간결한 문법(쉬운 문법), 파이썬 커뮤니티의 지원, 광범위한 응용 분야*(웹개발~알고리즘)
        - 알고리즘 구현에 유리: 직관적 문법, 강력한 표준 라이브러리, 빠른 프로토타이핑
    2. 파이썬 실행
        - 인터프리터가 사용자의 명령어를 운영체제가 이해하는 언어로 바꿈
        - 파이썬 인터프리터 사용법 2가지
            * shell 프로그램으로 한번에 한 명령어씩(프롬프트에서 python 어쩌고)
            * 확장자가 .py인 파일에 작성된 파이썬 프로그램을 실행
    3. 표현식과 값
        - 표현식: 값으로 평가될 수 있는 코드조각
        - 값: 표현식이 평가된 결과
        - 평가: 표현식을 실행하여 값을 얻는 과정; 표현식을 순차적으로 평가하여 프로그램의 동작을 결정
        - 문장: 실행 가능한 동작을 기술하는 코드(조건문, 반복문 함수 정의 등)
    4. 타입: 변수나 값이 가질 수 있는 데이터 종류를 의미(어떤 종류의 데이터인지, 어떻게 해석 처리 되어야 하는지 정의)
        - 타입은 '값'과 '값에 적용할 수 있는 연산'
        - 데이터 타입: Numeric(int, float, complex), Sequence(list, typle, range), Text Sequence(str), Non-Sequence(set, dict) ..
        - 데이터 타입에 맞는 연산 수행이 있음
        - 연산자 우선순위: 높음(**, -부호, (*, /, //, %)), 낮음(+, -)
    5. 변수와 메모리 "값이 저장되는 법"
        - 변수: 값을 저장하기 위한 이름 >> 값을 "참조"하기 위한 이름
        - 변수 할당: 표현식을 통해 변수에 값을 저장; "변수에 값을 *할당*했다", 간은 이름으로 다른 값 "재할당"
        - 변수, 값 그리고 메모리: 메모리의 모든 위치에는 고유 식별하는 메모리 주소가 존재, 객체는 타입을 갖는 메모리 주소 내 값, 변수는 그 변수가 "참조"하는 객체의 메모리 주소를 가짐
            (값의 주소가 할당되는 것임.. 표현식을 통해 할당된 변수는 재할당이 이루어지지 않는 이상 주소가 바뀌지 않음)

3. Data Types: 값의 종류와 그 값에 적용 가능한 연산과 동작을 결정하는 속성(위 2-4. '타입' 참조)
    - 데이터 타입이 필요한 이유: 값들 구분하고 어떻게 다뤄야 하는지, 코드 읽는 사람이 변수의 의도를 쉽게 이해하고 데이터 타입 오류 예방

4. Numeric Types
    1. int: 정수 자료형
        - 진수 표현: 2진수(binary; 0b), 8진수(octal; 0o), 16진수(hexadecimal; 0x) ; 진수의 표현법만 알아간다는 느낌으로 정립립
    2. float: 실수 자료형; 프로그래밍 언어에서 float는 실수에 대한 근삿값
        - 유한 정밀도: 모든 소수는 근삿값으로 치환(용량이 제한되어 있기 때문)
        - 실수 연산시 주의사항: 컴퓨터는 2진 사람은 10진 -> float point rounding error(부동소수점 에러) -> 해결핵: decimal 모듈 사용해 정확성 보장

5. Sequence Types: 여러 개의 값들을 순서대로 나열하여 저장하는 자료형; str, list, tuple, range
    - 순서(Sequence; 값들이 순서대로 저장), 인덱싱(Indexing; 각 값에 고유한 인덱스 있음, 특정 위치 값 선택하거나 수정 가능), 슬라이싱(인덱스 범위를 조절해 부분적 값 추출 가능), 길이(len()함수), 반복
    1. str: 문자열; 문자들의 순서가 있는/변경 불가능한(not support item assignment)/시퀀스 자료형
        - 중첩 따옴표, Escape Sequence(\n, \t, \\, \', \")
        - String Interpolation: 문자열 내에 변수나 표현식을 삽입하는 방법
            * *f-String: 문자열에 f또는 F 접두어 붙이고 표현식을 {expression}로 작성하는 문법*[중요]
        - Index: 시퀀스 내의 값들에 대한 고유한 번호, 각 값의 위치를 식별하는 데 사용되는 숫자
        - Slicing: 시퀀스의 일부분을 선택하여 추출하는 작업: 시작 인덱스와 끝 인덱스를 지정하여 해당 범위의 값을 포함하는 새로운 시퀀스를 생성

6. 참고
    - style guide: 문법상의 권장(강제)사항; 코드의 일관성과 가독성을 향상시키기 위해; 맞춤법
        * 변수명은 무엇을 위한 변수인지 직관적 이름
        * 공백은 4칸
        * 한 줄의 길이는 79자로 제한하여, 길어지면 줄바꿈
        * 문자와 언더바를 사용하여 함수, 변수, 속성의 이름을 작성
        * 함수 정의나 클래스 정의 등의 블록 사이에는 빈 줄을 추가 ..
        * https://peps.python.org/pep-0008/
    - 주석: # 주석; 여러줄은 드래그 후 ctrl + /(취소도 동일)

------------------------

## Data types / Control of flow / Functions
목차
[1. python
 2. data types
 3. operator
 4. control of flow
 5. Functions
 6. 참고]

1. python
    - 데이터 분석 활용: 풍부한 라이브러리(데이터 분석에 최적화된; pandas, numpy, matplotlib), 데이터 처리 및 시각화(대용향 데이터 처리와 시각화 쉽게), 머신러닝 및 인공지능 라이브러리(scikit-learn, tensorflow, keras)

2. data types
    1. data
        - 메서드: 객체에 속한 함수, 객체의 상태를 조작하거나 동작을 수행; 클래스 내부에 정의; 타입을 표현하는 방법
    2. Numeric
    3. Sequence
        - str: f-String은 문자열에 f 또는 F 접두어를 붙이고{표현식}하여 문자열에 삽입
            * str 메서드: replace(바꿀 대상, 새로운 글자), strip([chars]; 공백이나 특정 문자를 제거), split(공백이나 특정 문자를 기분으로 분리), 'separator'.join(iterable)(구분자로 iterable의 문자열을 연결한 문자열을 반환)
        - list
            * list 메서드: append, extend(iterable m 의 모든 항복들을 리스트 끝에 추가), pop(가장 오른쪽 항목을 반환 후 제거)
                           reverse(역순으로), sort(정렬렬)
        - tuple: 불변, 0개 이상의 객체, 소괄호, 어떤 자료형도 저장
        - range: 연속된 정수 시퀀스를 생성하는 불변 자료형
    4. Non-Sequence
        - dict: key - value쌍으로 이루어진 순서와 중복 없는 변경 가능한 자료형, 중괄호
            * 딕셔너리 메서드: get(k), get(k,v), keys, values, items, pop(k), pop(k,v)
        - set: 순서 중복 없는 변경 가능한 자료형, 수학에서의 집합과 동일한 연산 처리 기능, 중괄호
            * 세트 메서드: add(x), remove(x)           
    5. other: None, Boolean(참 거짓 표현, )
    6. 복사
        - 복사 유형: 할당(=), 얕은 복사(슬라이싱; 함께 변경됨), 깊은 복사(import copy; copy.deepcopy(list))
    7. type conversion: 암시적 형변환, 명시적 형변환

3. operator
    1. 기본 연산자
    2. 단축평가: 뭐지?
    3. 멤버십 연산자: 특정값이 시퀀스나 다른 컬렉션에 속하는지 여부를 확인(in, not in)
    4. 시퀀스형 연산자: 결합 연산자(+), 반복 연산자(*)

4. control of flow
    1. 제어문: 코드의 실행 흐름을 제어
        - 조건문: if, elif, else
        - 반복문: for while
    2. 조건문

    3. 반복문
        - 반복문 제어: break, continue, pass
        - iterable: 반복문에서 순회할 수 있는 객체(시퀀스 + dict, set)
        - while: 참인 동안 코드 반복 실행
        - 반복 제어 키워드: break(반복 즉시 중지), continue(다음 반복으로), pass(아무런 동작도 수행하지 않고 넘어감)
    4. list comprehension: 간결하고 효율적인 리스트 생성 방법; list(expression for 변수 in iterable if 조건식)

5. Functions
    1. 함수: 함수 구조(return은 결과값), 일급 객체(함수가 변수에 할당, 함수가 다른 함수의 인자로 전달될 수 있음, 함수가 다른 함수에 의해 반환될 수 있음), 익명함수(람다 표현식)
    2. 매개변수와 인자: 매개 변수(함수를 정의할 때 함수가 받을 값을 나타내는 변수), 인자(함수를 호출할 때, 실제로 전달되는 값값)
        * 다양한 인자 종류: 위치 인자, 기본 인자값, 키워드 인자, 
    3. packing & unpacking
    4. 내장 함수
    5. 람다 표현식

6. 참고
    1. style guide
    2. python tutor
    3. collection
    4. 불변과 가변
    5. enumerate
    6. 함수와 scope
    7. global 키워드드

1
