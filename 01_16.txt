1. AI와 법
생성형 AI 리스크의 예: 부정확성(그럴듯하지만 진실이 아님), 사이버보안, IP침해, 설명가능성, 개인정보, HR이슈
인공지는 규제 기관: 인공지능 기본법의 부재가 있었지만 최근 안건 등록됨; 과기부(인공지능 윤리 및 산업진흥), 방통위(표시의무 등, 아록리즘 관련 전기통신사업법 측면 규제), 문체부(학습데이터 포함된 저작물 등), 개인정보보호위원, 공정위(대기업의 AI 남용 등)
EU AI Act - 위험기반 규제: 수인불가 위험(금지/제한적 예외: 사회적 차별, 민감정보추론, 국가의 개인에 대한 권리 침해), 고위험(엄격; 제품 안전 관련, 보건안전기본권 관련, 출시 전 평가), 제한된 위험(투명성 의무만: 챗봇 딥페이크 등), 최소 위험
미국은 산업의 진흥을 위해 규제보다는 표준을 만드는 방식으로 진행
1) AI 관련 저작권 이슈
- 인공지능의 학습용 데이터셋(학습된 데이터의 양이 인공지능 성능에 큰 영향)->사전 이용 허락 필요, 유로 컨텐츠 경우에도 인공지능 학습 금지하는 경우도,, 이용약관 구체적으로 살펴봐야)
저작권법 위반의 가능성저작권의 사전허락 원칙; 저작물(수집, 이용 단계: 복제권 전송권/ 산출물 단계: 저작재산권,저작인격권), 데이터베이스(데베 제작자의 권리 침해 가능성)
AI 산출물 관련 저작권 침해 가능성-공정이용 여부(공정이용이면 저작권 침해가 아님)로 해결하긴 어렵다.. 너무 많은 정보를 기반으로 긁어오기도 하니까
Adobe Firefly - 깨끗한 학습? // Do's & Don'ts(내가 말한 대로 쓴 경우에만 면책해줄게, 산출 단계에서 저작권 침해 리스크 저감 방안: 수익창출을 위한 작품일 경우 마지막 체크 필요)
인공지능 산출물과 저작권: AI가 만든 것은 저작권의 주체 부정, AI와 사람이 같이 창작? 등록은 되지만 구분되어
AI 수로부인: 전 과정에 여러 생성형 AI활용.제작 영화: 사람이 기여한 '편집 저작물'로 등록
생성형 AI 저작권 안내서 발간, 저작권 제도개선(학습 분과, 산출 분과로 나누어짐), 국내외 입법 동향(이것은 AI가 생성한 것입니다. 즉 투명성 의무)
분쟁 사례-국내) 국립국어원의 '말뭉치 사업'에서의 웅진 전자책
분쟁 사례-미국) 뉴욕타임즈 기사 무단 사용이 문제된 사건(뉴스기사의 글은 학습에 너무나 적절한 글)
			게티이미지가 이미지 생성AI에게(워터마크를 통해 파악), 오픈소스 코드 창작자가
크롤링 관련 사례: 온라인 백과사전 미러링 사건, 채용정보 크롤링 사건 ; 산출물의 유사성과 AI기반인지 두 가지 입증 必
2) 할루시네이션과 딥페이크
그럴듯한 정보들이 주는 혼동
표시제(워터마크), 인격권 침해 이슈(유명인은 퍼플릭시티권으로 얼굴에 대한 저작권도 있음)
환각 발생 원인: 데이터 신뢰성 이슈와 개선방안(향상된 훈련 데이터, 사고대응팀, 투명성과 설명가능성, 인적 개입)
책임분배이슈(다수의 행위자들로 구성된 공급망, 데이터 흐름의 복잡성 증가, 전체 시스템에 대한 지식 및 가시성의 한계); AI 모델 제공자와 고객간 책임 분배 관련 계약 조합 확인 必
3) AI와 개인정보
AI 학습을 위해 사용되는 개인정보들
데이터 처리방식의 변화와 Privacy) 이루다(사업자가 운영한 데이터 앱이 있었는데,, 개인정보 이슈 때문에 과징금 부과)
인공지능 단계별 주요 쟁점
1) 기획: 개인정보보호 중심 설계 원칙(pbD)
2) 수집학습: 개인정보 처리 근거, 공개된 정보, 영상정보, 생체인식, 가명정보
3) 서비스: 투명성, 자동화된 의사결정, 책임분배
화풍, 작풍은 저작권 보호 대상이 아님, 저작권의 보호 대상은 구체적 표현
포토가드(긁어갈 때 이미지가 변환)

------------------------------------------------------------------------------

2. git
- git의 영역
워킹디렉토리: 현재 작업 위치
스테이징 에리어: 임시로, 등록해야..
레포지토리: 버전 이력과 파일들이 영구적으로 저장되는 영역, 모든 버전과 변경 이력이 기록됨
버전을 깃에서는 커밋이라고 부름(디비에서도 이렇게 부름), 지금 현재 파일들의 최종상태와 변경이력을 저장

- git 의 동작
저장된 폴더인지 아닌지 알아야
git init: 로컬 저장소 설정
git add: 워킹디렉토리에서 스테이징에리어에 저장하기 위해서(추가적인 기능은 옵션, 인자를 선택적으로), 버전 기록을 위해
하루의 마무리는 레포지토리에 기록하는 것
git commit: 스테이징에리어에 있는 파일들을 저장소에 기록(리포로), 커밋을 할 때는 일종의 메모 같은 기록을 남겨야 함(어떤 버전인지)
ls -a: 숨긴 폴더 보여줌
git status: 스태이징에리어의 정보를 보여줌 -> 초반에는 시스템 이해를 위해 자주 사용해야 함
  (use "git rm --cached <file>..." to unstage): 만약 위 명령을 취소하기 위해서는 이걸 명령
가장 중요한 정보는 이메일 정보
홈디는 c/사용자/SSAFY..
제일 처음 생기는 커밋(버전정보를 기록): 루트 커밋; 루트커밋이 같아야 연동이 됨
git log: 커밋 내용을 보는 명령어(현재 저장소의 커밋을 볼 수 있음) (옵션 --oneline: 한 줄로 출력해줘, 해쉬도 맨앞 일곱자리만), 가장 마지막에 한 커밋이 가장 위에
해쉬는 커밋을 구별하기 위한 유니크한 값
ctrl+s: 
git add .:바뀐파일들 전부 스테이징으로 올려버려
git restore: 가장 최근에 애드한 커밋으로 되돌아감
vim 에디터 반드시 알아야 한다고 하네

+ remote repository(원격 저장소): 코드와 버전 관리 이력을 온라인 상의 특정 위치에 저장하여 여러 개발자가 협업하고 코드를 공유할 수 있는 저장 공간); 서버에 푸쉬해서 올려놓고, 깃풀해서 내려받아 최신으로 맞추어 동기화(작업 재개)
커밋이 쌓임. 커밋이 더 쌓여 있는 곳에서 덜 쌓여 있는 곳으로 불러서 동기화(같게 만듬) 즉 쌓여있는 순서가 중요함(순서 같아야 함요)->그러니까 푸쉬 전 풀하고 쌓기
+대표적인 원격 저장소 깃헙; 서버개념은 맞는데 실시간은 아니고, 따로따로 like
아래는 우리가 오늘 사용해 볼 명령어(앞에 git을 생략한 것임)
Add a README file : 리드미 파일 있는 레포 생성? 아니면 빈 레포? -> 첫번째 커밋을 만들어줌(로컬 파일과 동기화 어렵겠지)
- remote: 로컬 저장소와 원격 저장소를 연결하기 위해(로컬저장소에 웜격저장소 추가)
git remote add origin(원격저장소를 부르는 이름) remote_repo_url(실제 url 주소)
git remote -v(등록된 원격 저장소 목록 확인
원격 저장소에서 수정하거나 커밋 만들면 바~~보
:wq로 탈출//안맞으면 풀, 알아서 맞춰주면 다시 푸시
- push

- pull&clone
원격저장소에 더 많이 쌓여 있다면 푸울~(git pull origin master)
내 로컬 저장소에 아무것도 없어서, 원격 저장소에 있는 커밋 쌓인 파일을 로컬로 부르고 싶다면 클론(git clone remote_repo_url)
git init 초기화한다
$ git clone https://github.com/nomorelearning/myproject.git 저장하고 싶은 폴더 이름(.은 현재 폴더)
클론 해온 것은 푸쉬 뒤에 오리진 마스터 필요없음
- 실습
got remote add other url
git push remote 
+.gitignore(특수한 파일의 이름): 깃한테 이런이런 폴더나 파일은 무시해도 돼, 필요한 것은 소스코드뿐이기 때문
처음에 만들어 놓는 파일은 README와 .gitignore파일 두개로 시작
add, commit 전에 미리 작성해놓아야 추적하지 않는다
*.txt: 한 글자 이상의 어떤 길이든 어떤 문자든 확장자가 txt인 모든 파일을 지칭
+GitHub활용; 포트폴리오;첫화면 만드는 법
1) 프젝협업
2) 개인 포트폴리오
활용하기) TIL(Today I Learn)을 통해 내가 학습하는 것을 기록 / 개인, 팀 프로젝트 코드를 공유(개발 면접 지원시,,) / 오픈 소스 프젝 기여 / 
README.md는 프젝 설명 사용법 문서화된 정보 등을 포함/마크다운 형식/ 만드시 저장소 최상단에 위치해야야
git remote -v: 현재 로컬 저장소에 등록된 원격 저장소 목록 보기
git remote rm 원격_저장소_이름: 현재 로컬 저장소에 등록된 원격 저장소 삭제
(역으로 가는 작업, 커밋을 취소하기 위한 명령어)
git revert: 특정 커밋을 없던 일로 만드는 작업(git revert <commit id>); 특정 커밋 취소
    없었던 일로 처리될 커밋(기록에서 사라지지 않음, 현재 커밋은 없었던 일로 처리되었을 때의 결과)
    untracked.txt는 커밋에 포함된 적 없는 파일
    기록의 손실을 방지, 기록의 무결성과 협업의 신뢰성 높임(안전)
git reset: 특정 커밋으로 되돌아가는 작업("회귀", 그 후의 커밋들은 증발)(git reset [option] <commit id>)
    option으로 soft mixed hard.. 어떤 상태인지 스테이징에 올림? 워킹 디렉(디폴트)? 아예 없애?
    옵션이 중요: 커밋들의 기록을 어떤 영역에 남겨둘 것인지
    중간중간 뽕뽕뽕 안됨
    - 이미 삭제한 커밋으로 다시 돌아가고 싶다면?
        git reflog: 헤드가 이전에 가리켰던 모든 커밋을 보여줌
git undoing: 파일 내용을 수정 전으로 되돌리기