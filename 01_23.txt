목차
[1. 모듈
 2. 파이썬 표준 라이브러리
 3. 제어문
 4. 조건문
 5. 반복문
 6. 참고]

1. 모듈: 한 파일로 묶인 변수와 함수의 모음; 특정한 기능을 하는 코드가 작성된 파이썬 파일(.py)
  - 예시) import math..
  1. 모듈 활용
   - 가져오는 방법: import 문 / from 절 import 문: 모듈 중 하나의 기능만을 가져오기 위해(함수를 사용할 때 모듈명은 쓰지 않음 <-> 모듈 자체를 가져온 것이면, 아래처럼)
   - 사용하기: 모듈명.함수명 or 모듈명.변수명 => 명시적이고 직관적이기 때문에 스타일 가이드에서는 import문을 권장
   - 주의사항: 서로 다른 모듈이 같은 이름의 함수를 제공할 경우 문제 발생
   - as 키워드: 별칭(alias) 부여: 두 개 이상의 모듈에서 동일한 이름의 변수, 함수 클래스 등을 가져올 때 발생하는 이름 충돌 해결
  2. 사용자 정의 모듈
    - 직접 정의한 모듈 사용하기: 모듈 my_math.py 작성 > 두 수의 합을 구하는 add 함수 작성 > my_math 모듈 import 후 add 함수 호출

2. 파이썬 표준 라이브러리(PSL)
  1. 패키지: 연관된 모듈들을 하나의 디렉토리에 모아놓은 것 ; 라이브러리 > 패키지 > 모듈(포함관계)
    - from 패키지.패키지 import 모듈 : 이런 식에서는 from이 필요
    - 사용하기: 각 패키지의 모듈을 import 하여 사용하기 // 외부 패키지는 pip을 사용하여 설치 후 import 필요(pip install 패키지 <-> pip uninstall 패키지)
      ★ pip install requests: 외부 API 요청 // pip list: 설치한 외부 패키지 조회
        - response = requests.get(url).json(): 받은 응답을 JSON 형태로 받아 Python 객체로 변환
    - 사용목적: 모듈들의 이름공간을 구분하여 충돌 방지, 모듈들을 효율적으로 관리하고 재사용할 수 있도록 돕는 역할

3. 제어문: 코드의 실행 흐름을 제어하는데 사용되는 구문, 조건에 따라 코드 블록을 실행하거나 반복적으로 코드를 실행
  - 조건문(if, elif, else): 주어진 조건식을 평가하여 해당 조건이 참인 경우에만 실행하거나 건너뜀
  - 반복문(for, while): 주어진 코드 블록을 여러번 반복해서 실행하는 구문
  - 반복문 제어(break, continue, pass): for문과 while은 매 반복마다 본문 내 모든 코드를 실핼하지만 때때로 일부만 실행하는 것이 필요할 때가 있음

4. 조건문
  - 조건식을 '순차적'으로 비교
  1. if statement

5. 반복문
  1. for statement: 임의의 시퀀스의 항목들을 그 시퀀스에 들어있는 순서대로 반복(iterable객체가 소진될 때까지)
    - for 변수 in iterable("반복 횟수가 명확"하게 정해져 있는 경우에 유용) ; iterable에 dict, set도 포함
    - 'for 단수 in 복수'는 네이밍 팁~!
    - dict는 반복이 돌면 key를 출력함
    - 인덱스로 리스트 순회
  2. while statement: 주어진 조건식이 참인 동안 코드를 반복해서 실행 == 조건식이 거짓이 될 때까지 반복
    - while문은 반드시 '종료 조건'이 필요
    - "반복횟수가 불명확"하거나 "조건에 따라 반복을 종료"해야 할 때 유용
  3. 반복 제어
    - break: 반복 즉시 중지
    - continue: 다음 반복으로
    - pass: 아무런 동작도 수행하지 않고 넘어감(코드 작성 중 미완성 부분, 조건문에서 아무런 동작을 수행하지 않아야 할 때, 무한 루프 while True일 때 조건에 충족하지 않지만 루프를 계속 진행하고 싶다면)
    * 플래그 변수: 어떤 사실의 여부를 저장하는 변수
  4. List Comprehension: 간결하고 효율적인 리스트 생성 방법 but 가독성이 좋지는 않음 ; pythonic한 방법
    - 구조: list(expression for 변수 in iterable if 조건식)
    - 2차원 배열 생성 시(인접행렬 생성 시): [[0] * (5) for _ in range(5)] == [[0 for _ in range(5)] for _ in range(5)]
    - map: 이미 존재하는 함수에 여러 값을 한꺼번에 적용할 때 가독성이 좋아짐

6. 참고
  1. 모듈 내부 살펴보기: help(패키지)
  2. enumerate(iterable, start = 0): iterable 객체의 각 요소에 대해 '인덱스와 함께 반환'하는 내장함수
    - lst = list((index, fruit) for index, fruit in enumerate(fruits))
    - for index, fruit in enumerate(fruits, 3):

  -  만약 import된 곳에 print() 구문이 있다면 python ~ 로 실행시킨 파일에서도 import한 모듈에 있는 print()구문이 따라와서 실행이 되게 된다
        - 만약 이 구문을 실행하고 싶지 않는다면
        - if __name__ == '__main__'
            print()
            print()
            print()
        - 라고 명시해주면 '__main__'인 파일에서 python~으로 실행하였을때 모듈에 있는 함수나 변수만 가져올 수 있다